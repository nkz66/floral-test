// <auto-generated />
using System;
using Floral.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Floral.Migrations
{
    [DbContext(typeof(FloralContext))]
    [Migration("20191026162318_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Floral.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<decimal>("deliveryPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTimeOffset>("deliveryTime");

                    b.Property<int>("driverId");

                    b.Property<bool>("isDelivery");

                    b.Property<int>("orderId");

                    b.Property<string>("postcode")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("recipient")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("recipientPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("streetAddress")
                        .IsRequired()
                        .HasMaxLength(700);

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("driverId");

                    b.HasIndex("orderId")
                        .IsUnique();

                    b.ToTable("delivery");
                });

            modelBuilder.Entity("Floral.Models.DeliveryTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.ToTable("deliveryTime");
                });

            modelBuilder.Entity("Floral.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.ToTable("driver");
                });

            modelBuilder.Entity("Floral.Models.FlowerPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PackageTypeId");

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("PackageTypeId");

                    b.ToTable("flowerPackage");
                });

            modelBuilder.Entity("Floral.Models.FlowerQuantityOrSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PackageId");

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<bool>("isQuantity");

                    b.Property<bool>("isSize");

                    b.Property<int>("quantity");

                    b.Property<int>("size");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("flowerQuantityOrSize");
                });

            modelBuilder.Entity("Floral.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<int>("inventoryStatusId");

                    b.Property<int>("itemId");

                    b.Property<int>("quantity");

                    b.Property<long>("remark")
                        .HasMaxLength(300);

                    b.Property<int>("stock");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("inventoryStatusId");

                    b.HasIndex("itemId");

                    b.ToTable("inventory");
                });

            modelBuilder.Entity("Floral.Models.InventoryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<int>("inOrOut");

                    b.Property<string>("statusName")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.ToTable("inventoryStatus");
                });

            modelBuilder.Entity("Floral.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<decimal>("cost")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<decimal>("discount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("isPackage");

                    b.Property<bool>("isSellingItem");

                    b.Property<bool>("isStock");

                    b.Property<bool>("isTag");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("packageId");

                    b.Property<decimal>("sellingPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("stock");

                    b.Property<int>("supplierId");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("code");

                    b.HasIndex("name");

                    b.HasIndex("packageId")
                        .IsUnique();

                    b.HasIndex("supplierId");

                    b.ToTable("item");
                });

            modelBuilder.Entity("Floral.Models.ItemGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.ToTable("itemGroup");
                });

            modelBuilder.Entity("Floral.Models.ItemMmItemGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<int>("itemGroupId");

                    b.Property<int>("itemId");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("itemGroupId");

                    b.HasIndex("itemId");

                    b.ToTable("itemMmItemGroup");
                });

            modelBuilder.Entity("Floral.Models.ItemTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<int>("itemId");

                    b.Property<int>("tagId");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("itemId");

                    b.HasIndex("tagId");

                    b.ToTable("itemTag");
                });

            modelBuilder.Entity("Floral.Models.MessageCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("orderId");

                    b.Property<string>("place")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("recipient")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("orderId")
                        .IsUnique();

                    b.ToTable("messageCard");
                });

            modelBuilder.Entity("Floral.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<int>("orderStatus");

                    b.Property<decimal>("totalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.Property<int>("userId");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("Floral.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<int>("itemId");

                    b.Property<int>("orderId");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("quantity");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("itemId")
                        .IsUnique();

                    b.HasIndex("orderId");

                    b.ToTable("orderItem");
                });

            modelBuilder.Entity("Floral.Models.PackageItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<int>("flowerPackageId");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("flowerPackageId");

                    b.ToTable("packageItem");
                });

            modelBuilder.Entity("Floral.Models.PackageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.ToTable("packageType");
                });

            modelBuilder.Entity("Floral.Models.PaymentOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("orderId");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("orderId")
                        .IsUnique();

                    b.ToTable("paymentOption");
                });

            modelBuilder.Entity("Floral.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.Property<int>("userId");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("shoppingCart");
                });

            modelBuilder.Entity("Floral.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<int>("itemId");

                    b.Property<int>("quantity");

                    b.Property<int>("shoppingCartId");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("itemId")
                        .IsUnique();

                    b.HasIndex("shoppingCartId");

                    b.ToTable("shoppingCartItem");
                });

            modelBuilder.Entity("Floral.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("bank")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("bankAcc")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("campanyName")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("phoneNum")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.Property<string>("website")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("campanyName");

                    b.ToTable("supplier");
                });

            modelBuilder.Entity("Floral.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("tagTypeId");

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("tagTypeId");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("Floral.Models.TagType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.ToTable("tagType");
                });

            modelBuilder.Entity("Floral.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("name");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Floral.Models.UserDeliveryAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeliveryId");

                    b.Property<int>("UserId");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset>("createDateTime");

                    b.Property<string>("postcode")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("recipient")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("recipientPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("streetAddress")
                        .IsRequired()
                        .HasMaxLength(700);

                    b.Property<DateTimeOffset>("updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("UserId");

                    b.ToTable("userDeliveryAddresses");
                });

            modelBuilder.Entity("Floral.Models.Delivery", b =>
                {
                    b.HasOne("Floral.Models.Driver", "Driver")
                        .WithMany("Delivery")
                        .HasForeignKey("driverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Floral.Models.Order", "Order")
                        .WithOne("delivery")
                        .HasForeignKey("Floral.Models.Delivery", "orderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.FlowerPackage", b =>
                {
                    b.HasOne("Floral.Models.PackageType", "packageType")
                        .WithMany("FlowerPackage")
                        .HasForeignKey("PackageTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.FlowerQuantityOrSize", b =>
                {
                    b.HasOne("Floral.Models.FlowerPackage", "FlowerPackage")
                        .WithMany("FlowerQuantityOrSize")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.Inventory", b =>
                {
                    b.HasOne("Floral.Models.InventoryStatus", "InventoryStatus")
                        .WithMany("Inventory")
                        .HasForeignKey("inventoryStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Floral.Models.Item", "Item")
                        .WithMany("Inventory")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.Item", b =>
                {
                    b.HasOne("Floral.Models.FlowerPackage", "FlowerPackage")
                        .WithOne("Item")
                        .HasForeignKey("Floral.Models.Item", "packageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Floral.Models.Supplier", "Supplier")
                        .WithMany("Item")
                        .HasForeignKey("supplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.ItemMmItemGroup", b =>
                {
                    b.HasOne("Floral.Models.ItemGroup", "itemGroup")
                        .WithMany("ItemMmItemGroups")
                        .HasForeignKey("itemGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Floral.Models.Item", "item")
                        .WithMany("ItemMmItemGroups")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.ItemTag", b =>
                {
                    b.HasOne("Floral.Models.Item", "item")
                        .WithMany("ItemTags")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Floral.Models.Tag", "tag")
                        .WithMany("ItemTag")
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.MessageCard", b =>
                {
                    b.HasOne("Floral.Models.Order", "Order")
                        .WithOne("messageCard")
                        .HasForeignKey("Floral.Models.MessageCard", "orderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.Order", b =>
                {
                    b.HasOne("Floral.Models.User", "user")
                        .WithMany("Order")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.OrderItem", b =>
                {
                    b.HasOne("Floral.Models.Item", "item")
                        .WithOne("OrderItem")
                        .HasForeignKey("Floral.Models.OrderItem", "itemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Floral.Models.Order", "order")
                        .WithMany("OrderItem")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.PackageItem", b =>
                {
                    b.HasOne("Floral.Models.FlowerPackage", "flowerPackage")
                        .WithMany("packageItem")
                        .HasForeignKey("flowerPackageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.PaymentOption", b =>
                {
                    b.HasOne("Floral.Models.Order", "Order")
                        .WithOne("paymentOption")
                        .HasForeignKey("Floral.Models.PaymentOption", "orderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.ShoppingCart", b =>
                {
                    b.HasOne("Floral.Models.User", "user")
                        .WithMany("ShoppingCart")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("Floral.Models.Item", "Item")
                        .WithOne("ShoppingCartItem")
                        .HasForeignKey("Floral.Models.ShoppingCartItem", "itemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Floral.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItem")
                        .HasForeignKey("shoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.Tag", b =>
                {
                    b.HasOne("Floral.Models.TagType", "tagType")
                        .WithMany("Tag")
                        .HasForeignKey("tagTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floral.Models.UserDeliveryAddress", b =>
                {
                    b.HasOne("Floral.Models.Delivery", "Delivery")
                        .WithMany()
                        .HasForeignKey("DeliveryId");

                    b.HasOne("Floral.Models.User", "User")
                        .WithMany("UserDeliveryAddress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
